#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìù Criador de Documenta√ß√£o - AppVisita
Script para automatizar cria√ß√£o de docs usando templates
"""

import os
import sys
import shutil
from datetime import datetime
from pathlib import Path

class DocumentationCreator:
    def __init__(self):
        """Inicializar criador de documenta√ß√£o"""
        self.templates_dir = Path("templates")
        self.docs_dir = Path("docs")
        self.features_dir = Path("docs/features")
        self.bugfixes_dir = Path("docs/bugfixes")
        self.api_dir = Path("docs/api")
        
        self.templates = {
            'feature': 'FEATURE_TEMPLATE.md',
            'bugfix': 'BUGFIX_TEMPLATE.md',
            'api': 'API_ENDPOINT_TEMPLATE.md'
        }
        
        # Criar diret√≥rios se n√£o existirem
        for dir_path in [self.features_dir, self.bugfixes_dir, self.api_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def show_menu(self):
        """Mostrar menu principal"""
        print("üìù Criador de Documenta√ß√£o AppVisita")
        print("=" * 50)
        print("1. üÜï Nova Funcionalidade")
        print("2. üêõ Corre√ß√£o de Bug")
        print("3. üîå Novo Endpoint de API")
        print("4. üìã Listar documentos existentes")
        print("5. üîç Verificar templates")
        print("0. ‚ùå Sair")
        print()
    
    def get_user_input(self, prompt, required=True):
        """Obter input do usu√°rio com valida√ß√£o"""
        while True:
            value = input(f"{prompt}: ").strip()
            if value or not required:
                return value
            print("‚ùå Este campo √© obrigat√≥rio!")
    
    def get_current_date(self):
        """Obter data atual formatada"""
        now = datetime.now()
        return {
            'dd_mm_yyyy': now.strftime('%d/%m/%Y'),
            'dd_mes_yyyy': now.strftime(f'%d de {self.get_month_name(now.month)} de %Y'),
            'yyyy_mm_dd': now.strftime('%Y-%m-%d')
        }
    
    def get_month_name(self, month):
        """Obter nome do m√™s em portugu√™s"""
        months = {
            1: 'Janeiro', 2: 'Fevereiro', 3: 'Mar√ßo', 4: 'Abril',
            5: 'Maio', 6: 'Junho', 7: 'Julho', 8: 'Agosto',
            9: 'Setembro', 10: 'Outubro', 11: 'Novembro', 12: 'Dezembro'
        }
        return months.get(month, 'Janeiro')
    
    def create_feature_doc(self):
        """Criar documenta√ß√£o de nova funcionalidade"""
        print("\nüÜï Criando documenta√ß√£o de nova funcionalidade")
        print("-" * 50)
        
        # Coletar informa√ß√µes
        nome_funcionalidade = self.get_user_input("Nome da funcionalidade")
        modulo = self.get_user_input("M√≥dulo (ex: app-admin.js, app-pacientes.js)")
        desenvolvedor = self.get_user_input("Nome do desenvolvedor")
        versao = self.get_user_input("Vers√£o", required=False) or "v1.0.0"
        objetivo = self.get_user_input("Objetivo/descri√ß√£o da funcionalidade")
        
        # Criar nome do arquivo
        nome_arquivo = nome_funcionalidade.lower().replace(' ', '_').replace('-', '_')
        nome_arquivo = f"FEATURE_{nome_arquivo}.md"
        arquivo_destino = self.features_dir / nome_arquivo
        
        # Carregar template
        template_path = self.templates_dir / self.templates['feature']
        if not template_path.exists():
            print(f"‚ùå Template n√£o encontrado: {template_path}")
            return False
        
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Substituir placeholders
        dates = self.get_current_date()
        
        replacements = {
            '[Nome da Funcionalidade]': nome_funcionalidade,
            '[Nome completo da funcionalidade]': nome_funcionalidade,
            '[app-admin.js | app-pacientes.js | app-equipes.js | etc.]': modulo,
            '[v1.x.x]': versao,
            '[Nome do desenvolvedor]': desenvolvedor,
            '[DD/MM/YYYY]': dates['dd_mm_yyyy'],
            '[DD de M√™s de YYYY]': dates['dd_mes_yyyy'],
            '[Descri√ß√£o clara do que a funcionalidade resolve ou melhora]': objetivo
        }
        
        for placeholder, value in replacements.items():
            content = content.replace(placeholder, value)
        
        # Salvar arquivo
        with open(arquivo_destino, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Documenta√ß√£o criada: {arquivo_destino}")
        print(f"üìù Pr√≥ximos passos:")
        print(f"   1. Edite o arquivo {arquivo_destino}")
        print(f"   2. Remova as instru√ß√µes do template")
        print(f"   3. Preencha todas as se√ß√µes [entre colchetes]")
        print(f"   4. Adicione screenshots se necess√°rio")
        
        return True
    
    def create_bugfix_doc(self):
        """Criar documenta√ß√£o de corre√ß√£o de bug"""
        print("\nüêõ Criando documenta√ß√£o de corre√ß√£o de bug")
        print("-" * 50)
        
        # Coletar informa√ß√µes
        titulo_bug = self.get_user_input("T√≠tulo/descri√ß√£o do bug")
        bug_id = self.get_user_input("ID do bug (ex: #123)", required=False)
        severidade = self.get_user_input("Severidade (Cr√≠tica/Alta/M√©dia/Baixa)", required=False) or "M√©dia"
        modulo = self.get_user_input("M√≥dulo afetado")
        desenvolvedor = self.get_user_input("Desenvolvedor respons√°vel pela corre√ß√£o")
        sintomas = self.get_user_input("Sintomas observados")
        
        # Criar nome do arquivo
        nome_arquivo = titulo_bug.lower().replace(' ', '_').replace('-', '_')
        nome_arquivo = f"BUGFIX_{nome_arquivo}.md"
        arquivo_destino = self.bugfixes_dir / nome_arquivo
        
        # Carregar template
        template_path = self.templates_dir / self.templates['bugfix']
        if not template_path.exists():
            print(f"‚ùå Template n√£o encontrado: {template_path}")
            return False
        
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Substituir placeholders
        dates = self.get_current_date()
        
        replacements = {
            '[T√≠tulo do Bug Fix]': titulo_bug,
            '[#n√∫mero ou refer√™ncia]': bug_id or "TBD",
            '[Cr√≠tica | Alta | M√©dia | Baixa]': severidade,
            '[app-admin.js | app-pacientes.js | etc.]': modulo,
            '[Nome do desenvolvedor]': desenvolvedor,
            '[DD/MM/YYYY]': dates['dd_mm_yyyy'],
            '[DD de M√™s de YYYY]': dates['dd_mes_yyyy'],
            '[Descri√ß√£o detalhada do comportamento incorreto]': sintomas
        }
        
        for placeholder, value in replacements.items():
            content = content.replace(placeholder, value)
        
        # Salvar arquivo
        with open(arquivo_destino, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Documenta√ß√£o criada: {arquivo_destino}")
        print(f"üìù Pr√≥ximos passos:")
        print(f"   1. Edite o arquivo {arquivo_destino}")
        print(f"   2. Preencha os passos de reprodu√ß√£o")
        print(f"   3. Documente a solu√ß√£o implementada")
        print(f"   4. Adicione testes de valida√ß√£o")
        
        return True
    
    def create_api_doc(self):
        """Criar documenta√ß√£o de endpoint de API"""
        print("\nüîå Criando documenta√ß√£o de endpoint de API")
        print("-" * 50)
        
        # Coletar informa√ß√µes
        nome_endpoint = self.get_user_input("Nome do endpoint")
        url_path = self.get_user_input("URL path (ex: /api/v1/users)")
        metodo = self.get_user_input("M√©todo HTTP (GET/POST/PUT/DELETE/PATCH)")
        modulo = self.get_user_input("M√≥dulo/sistema")
        desenvolvedor = self.get_user_input("Desenvolvedor respons√°vel")
        proposito = self.get_user_input("Prop√≥sito/descri√ß√£o do endpoint")
        
        # Criar nome do arquivo
        nome_arquivo = nome_endpoint.lower().replace(' ', '_').replace('-', '_')
        nome_arquivo = f"API_{nome_arquivo}.md"
        arquivo_destino = self.api_dir / nome_arquivo
        
        # Carregar template
        template_path = self.templates_dir / self.templates['api']
        if not template_path.exists():
            print(f"‚ùå Template n√£o encontrado: {template_path}")
            return False
        
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Substituir placeholders
        dates = self.get_current_date()
        
        replacements = {
            '[Nome do Endpoint]': nome_endpoint,
            '[/api/v1/endpoint]': url_path,
            '[GET | POST | PUT | DELETE | PATCH]': metodo,
            '[METHOD]': metodo,
            '[method]': metodo.lower(),
            '[Nome do m√≥dulo]': modulo,
            '[Nome do desenvolvedor]': desenvolvedor,
            '[DD/MM/YYYY]': dates['dd_mm_yyyy'],
            '[DD de M√™s de YYYY]': dates['dd_mes_yyyy'],
            '[Descri√ß√£o clara do que este endpoint faz]': proposito
        }
        
        for placeholder, value in replacements.items():
            content = content.replace(placeholder, value)
        
        # Salvar arquivo
        with open(arquivo_destino, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Documenta√ß√£o criada: {arquivo_destino}")
        print(f"üìù Pr√≥ximos passos:")
        print(f"   1. Edite o arquivo {arquivo_destino}")
        print(f"   2. Defina par√¢metros e valida√ß√µes")
        print(f"   3. Documente exemplos de uso")
        print(f"   4. Adicione casos de teste")
        
        return True
    
    def list_existing_docs(self):
        """Listar documentos existentes"""
        print("\nüìã Documentos existentes")
        print("-" * 50)
        
        sections = [
            ("üÜï Funcionalidades", self.features_dir),
            ("üêõ Corre√ß√µes de Bug", self.bugfixes_dir),
            ("üîå APIs", self.api_dir)
        ]
        
        for section_name, directory in sections:
            print(f"\n{section_name}:")
            if directory.exists():
                files = list(directory.glob("*.md"))
                if files:
                    for file in sorted(files):
                        print(f"   üìÑ {file.name}")
                else:
                    print("   (nenhum documento encontrado)")
            else:
                print("   (diret√≥rio n√£o existe)")
    
    def check_templates(self):
        """Verificar se templates existem"""
        print("\nüîç Verificando templates")
        print("-" * 50)
        
        for template_type, template_file in self.templates.items():
            template_path = self.templates_dir / template_file
            if template_path.exists():
                print(f"‚úÖ {template_type}: {template_file}")
            else:
                print(f"‚ùå {template_type}: {template_file} (N√ÉO ENCONTRADO)")
        
        if not self.templates_dir.exists():
            print(f"\n‚ö†Ô∏è Diret√≥rio de templates n√£o encontrado: {self.templates_dir}")
            print("   Execute este script na raiz do projeto AppVisita")
    
    def run(self):
        """Executar o criador de documenta√ß√£o"""
        while True:
            self.show_menu()
            choice = input("Escolha uma op√ß√£o: ").strip()
            
            if choice == '1':
                self.create_feature_doc()
            elif choice == '2':
                self.create_bugfix_doc()
            elif choice == '3':
                self.create_api_doc()
            elif choice == '4':
                self.list_existing_docs()
            elif choice == '5':
                self.check_templates()
            elif choice == '0':
                print("üëã Saindo...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
            
            input("\nPressione Enter para continuar...")
            print("\n" * 2)

def main():
    """Fun√ß√£o principal"""
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('docs') and not os.path.exists('README.md'):
        print("‚ùå Execute o script na raiz do projeto AppVisita")
        sys.exit(1)
    
    creator = DocumentationCreator()
    creator.run()

if __name__ == "__main__":
    main() 