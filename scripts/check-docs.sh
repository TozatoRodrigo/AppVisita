#!/bin/bash

# üîç Script de Verifica√ß√£o de Documenta√ß√£o - AppVisita CI/CD
# Garante que toda mudan√ßa de c√≥digo seja acompanhada de atualiza√ß√£o na documenta√ß√£o

# N√£o parar em erro por enquanto, vamos ser mais tolerantes
# set -e

echo "üîç Verificando atualiza√ß√£o da documenta√ß√£o..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores para problemas
CRITICAL_ISSUES=0
WARNINGS=0
SUGGESTIONS=0

# Verificar se estamos em um reposit√≥rio git
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå ERRO: N√£o √© um reposit√≥rio Git${NC}"
    echo "‚ÑπÔ∏è Se executando em CI/CD, isso pode ser normal"
    exit 0  # N√£o falhar o CI/CD por isso
fi

# Obter arquivos modificados (comparar com HEAD~1)
MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
ADDED_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD 2>/dev/null || echo "")
ALL_CHANGED_FILES="$MODIFIED_FILES $ADDED_FILES"

echo -e "${BLUE}üìÅ Arquivos modificados/adicionados:${NC}"
if [ -z "$ALL_CHANGED_FILES" ]; then
    echo "  Nenhum arquivo modificado detectado"
    echo -e "${GREEN}‚úÖ Nenhuma verifica√ß√£o de documenta√ß√£o necess√°ria${NC}"
    exit 0
else
    echo "$ALL_CHANGED_FILES" | tr ' ' '\n' | grep -v '^$' | sed 's/^/  - /'
fi

# Verificar se h√° mudan√ßas de c√≥digo
CODE_CHANGED=false
DOCS_UPDATED=false
JS_FILES_CHANGED=""
CONFIG_FILES_CHANGED=""

# Padr√µes de arquivos de c√≥digo
CODE_PATTERNS=("*.js" "*.html" "*.css" "*.py" "*.json" "*.sql")
DOC_PATTERNS=("docs/*" "README.md" "*.md")
CONFIG_PATTERNS=("*.json" "*.yml" "*.yaml" "*.env*" "script-otimizado.js")

# Verificar arquivos de c√≥digo modificados
for file in $ALL_CHANGED_FILES; do
    # Verificar se √© arquivo de c√≥digo
    for pattern in "${CODE_PATTERNS[@]}"; do
        if [[ $file == $pattern ]]; then
            CODE_CHANGED=true
            if [[ $file == *.js ]]; then
                JS_FILES_CHANGED="$JS_FILES_CHANGED $file"
            fi
        fi
    done
    
    # Verificar se √© arquivo de configura√ß√£o
    for pattern in "${CONFIG_PATTERNS[@]}"; do
        if [[ $file == $pattern ]]; then
            CONFIG_FILES_CHANGED="$CONFIG_FILES_CHANGED $file"
        fi
    done
    
    # Verificar se documenta√ß√£o foi atualizada
    for pattern in "${DOC_PATTERNS[@]}"; do
        if [[ $file == $pattern ]]; then
            DOCS_UPDATED=true
        fi
    done
done

# Fun√ß√£o para verificar se tipo espec√≠fico de mudan√ßa requer doc
check_specific_requirements() {
    local requirements_met=true
    
    # Se mudou app-admin.js, sugere atualizar USER_MANUAL.md
    if [[ $JS_FILES_CHANGED == *"app-admin.js"* ]]; then
        if ! echo "$ALL_CHANGED_FILES" | grep -q "docs/USER_MANUAL.md"; then
            echo -e "${YELLOW}üí° SUGEST√ÉO: app-admin.js modificado - considere atualizar docs/USER_MANUAL.md${NC}"
            SUGGESTIONS=$((SUGGESTIONS + 1))
        fi
    fi
    
    # Se mudou estrutura de dados, sugere atualizar DATABASE.md
    if echo "$ALL_CHANGED_FILES" | grep -q "app-pacientes.js\|script-otimizado.js"; then
        if ! echo "$ALL_CHANGED_FILES" | grep -q "docs/DATABASE.md"; then
            echo -e "${YELLOW}üí° SUGEST√ÉO: Poss√≠vel mudan√ßa no banco - considere atualizar docs/DATABASE.md${NC}"
            SUGGESTIONS=$((SUGGESTIONS + 1))
        fi
    fi
    
    # Se mudou configura√ß√µes, sugere atualizar INSTALLATION.md
    if [[ -n "$CONFIG_FILES_CHANGED" ]]; then
        if ! echo "$ALL_CHANGED_FILES" | grep -q "docs/INSTALLATION.md"; then
            echo -e "${YELLOW}üí° SUGEST√ÉO: Configura√ß√µes modificadas - considere atualizar docs/INSTALLATION.md${NC}"
            SUGGESTIONS=$((SUGGESTIONS + 1))
        fi
    fi
    
    return 0  # Sempre retornar sucesso, s√£o apenas sugest√µes
}

# Verificar se commit inclui apenas documenta√ß√£o
ONLY_DOCS=true
for file in $ALL_CHANGED_FILES; do
    # Se n√£o √© documenta√ß√£o, n√£o √© commit apenas de docs
    is_doc=false
    for pattern in "${DOC_PATTERNS[@]}"; do
        if [[ $file == $pattern ]]; then
            is_doc=true
            break
        fi
    done
    
    if [ "$is_doc" = false ]; then
        ONLY_DOCS=false
        break
    fi
done

# Se √© commit apenas de documenta√ß√£o, aprovar
if [ "$ONLY_DOCS" = true ] && [ -n "$ALL_CHANGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ Commit de documenta√ß√£o aprovado${NC}"
    exit 0
fi

# Se n√£o houve mudan√ßas de c√≥digo, aprovar
if [ "$CODE_CHANGED" = false ]; then
    echo -e "${GREEN}‚úÖ Nenhuma mudan√ßa de c√≥digo detectada${NC}"
    exit 0
fi

echo -e "\n${BLUE}üîç An√°lise de mudan√ßas de c√≥digo:${NC}"

# Verificar se documenta√ß√£o foi atualizada quando c√≥digo mudou
if [ "$CODE_CHANGED" = true ] && [ "$DOCS_UPDATED" = false ]; then
    echo -e "${YELLOW}‚ö†Ô∏è AVISO: C√≥digo modificado mas documenta√ß√£o n√£o atualizada${NC}"
    echo -e "${BLUE}üìù Recomenda√ß√µes:${NC}"
    echo "   1. Identifique qual documenta√ß√£o √© afetada pela sua mudan√ßa"
    echo "   2. Atualize os arquivos relevantes em docs/"
    echo "   3. Atualize README.md se necess√°rio"
    echo "   4. Commit as mudan√ßas de documenta√ß√£o junto com o c√≥digo"
    echo ""
    echo -e "${BLUE}üí° Guia r√°pido:${NC}"
    echo "   - Nova funcionalidade ‚Üí USER_MANUAL.md + ARCHITECTURE.md"
    echo "   - Mudan√ßa de interface ‚Üí USER_MANUAL.md"
    echo "   - Mudan√ßa no banco ‚Üí DATABASE.md"
    echo "   - Configura√ß√£o ‚Üí INSTALLATION.md"
    echo "   - Bug fix ‚Üí TROUBLESHOOTING.md"
    echo ""
    echo -e "${BLUE}üìã Consulte: docs/DOCUMENTATION_UPDATE.md${NC}"
    
    # Incrementar warnings, mas n√£o falhar
    WARNINGS=$((WARNINGS + 1))
fi

# Verificar requisitos espec√≠ficos
echo -e "\n${BLUE}üéØ Verificando recomenda√ß√µes espec√≠ficas...${NC}"
check_specific_requirements

# Verificar se datas foram atualizadas nos docs
echo -e "\n${BLUE}üìÖ Verificando datas na documenta√ß√£o...${NC}"
TODAY=$(date +%Y-%m-%d)
CURRENT_YEAR=$(date +%Y)

for doc_file in docs/*.md README.md; do
    if [ -f "$doc_file" ] && echo "$ALL_CHANGED_FILES" | grep -q "$doc_file"; then
        # Verificar se data foi atualizada
        if ! grep -q "$CURRENT_YEAR" "$doc_file"; then
            echo -e "${YELLOW}üí° SUGEST√ÉO: $doc_file pode ter data desatualizada${NC}"
            SUGGESTIONS=$((SUGGESTIONS + 1))
        fi
    fi
done

# Verificar se README.md tem status atualizado
if echo "$ALL_CHANGED_FILES" | grep -q "README.md"; then
    if ! grep -q "$(date +%Y-%m-%d)" README.md 2>/dev/null; then
        echo -e "${YELLOW}üí° SUGEST√ÉO: README.md - considere atualizar data da √∫ltima atualiza√ß√£o${NC}"
        SUGGESTIONS=$((SUGGESTIONS + 1))
    fi
fi

# Gerar relat√≥rio de conformidade
echo -e "\n${GREEN}‚úÖ Verifica√ß√£o de documenta√ß√£o conclu√≠da${NC}"
echo -e "${BLUE}üìä Relat√≥rio:${NC}"
echo "   - C√≥digo modificado: $([ "$CODE_CHANGED" = true ] && echo "‚úÖ Sim" || echo "‚ùå N√£o")"
echo "   - Docs atualizados: $([ "$DOCS_UPDATED" = true ] && echo "‚úÖ Sim" || echo "‚ùå N√£o")"
echo "   - Arquivos JS: $(echo $JS_FILES_CHANGED | wc -w | tr -d ' ') modificados"
echo "   - Arquivos de doc: $(echo "$ALL_CHANGED_FILES" | tr ' ' '\n' | grep -E '\.(md)$' | wc -l | tr -d ' ') atualizados"
echo "   - üö® Problemas cr√≠ticos: $CRITICAL_ISSUES"
echo "   - ‚ö†Ô∏è Avisos: $WARNINGS"
echo "   - üí° Sugest√µes: $SUGGESTIONS"

# Log para CI/CD
echo "DOCS_CHECK_PASSED=true" >> $GITHUB_ENV 2>/dev/null || true
echo "CODE_CHANGED=$CODE_CHANGED" >> $GITHUB_ENV 2>/dev/null || true
echo "DOCS_UPDATED=$DOCS_UPDATED" >> $GITHUB_ENV 2>/dev/null || true
echo "DOCS_WARNINGS=$WARNINGS" >> $GITHUB_ENV 2>/dev/null || true
echo "DOCS_SUGGESTIONS=$SUGGESTIONS" >> $GITHUB_ENV 2>/dev/null || true

# Decidir exit code baseado na severidade
if [ $CRITICAL_ISSUES -gt 0 ]; then
    echo -e "\n${RED}üö® FALHA: $CRITICAL_ISSUES problemas cr√≠ticos encontrados!${NC}"
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è AVISO: $WARNINGS avisos encontrados (n√£o bloqueia CI/CD)${NC}"
    exit 0  # N√£o falhar o CI/CD por avisos
else
    echo -e "\n${GREEN}üéâ Verifica√ß√£o conclu√≠da com sucesso!${NC}"
    if [ $SUGGESTIONS -gt 0 ]; then
        echo -e "${BLUE}üí° $SUGGESTIONS sugest√µes foram feitas para melhorar a documenta√ß√£o${NC}"
    fi
fi

exit 0 